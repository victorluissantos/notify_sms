import 'package:permission_handler/permission_handler.dart';
import 'package:another_telephony/telephony.dart';
import 'dart:io';

class RealSMSService {
  // Verifica e solicita permiss√µes necess√°rias
  static Future<bool> requestPermissions() async {
    try {
      print('DEBUG: === SOLICITANDO PERMISS√ïES ===');
      
      // Verifica status atual
      final currentStatus = await Permission.sms.status;
      print('DEBUG: Status atual das permiss√µes SMS: $currentStatus');
      
      // Se j√° tem permiss√£o, retorna true
      if (currentStatus.isGranted) {
        print('DEBUG: ‚úÖ Permiss√µes j√° concedidas');
        return true;
      }
      
      // Se est√° negado, solicita novamente
      if (currentStatus.isDenied) {
        print('DEBUG: üîÑ Permiss√µes negadas, solicitando novamente...');
        final smsStatus = await Permission.sms.request();
        print('DEBUG: Resultado da solicita√ß√£o: $smsStatus');
        return smsStatus.isGranted;
      }
      
      // Se est√° permanentemente negado, tenta abrir configura√ß√µes
      if (currentStatus.isPermanentlyDenied) {
        print('DEBUG: ‚ö†Ô∏è Permiss√µes permanentemente negadas, abrindo configura√ß√µes...');
        final opened = await openAppSettings();
        print('DEBUG: Configura√ß√µes abertas: $opened');
        return false; // Usu√°rio precisa configurar manualmente
      }
      
      // Se est√° restrito, retorna false
      if (currentStatus.isRestricted) {
        print('DEBUG: ‚ùå Permiss√µes restritas pelo sistema');
        return false;
      }
      
      print('DEBUG: ‚ùå Status de permiss√£o desconhecido: $currentStatus');
      return false;
      
    } catch (e) {
      print('DEBUG: ‚ùå Erro ao solicitar permiss√µes: $e');
      print('DEBUG: Tipo do erro: ${e.runtimeType}');
      return false;
    }
  }
  
  // Verifica se tem permiss√µes
  static Future<bool> hasPermissions() async {
    try {
      final smsStatus = await Permission.sms.status;
      return smsStatus.isGranted;
    } catch (e) {
      print('DEBUG: Erro ao verificar permiss√µes: $e');
      return false;
    }
  }
  
  // Envia SMS real usando another_telephony para envio DIRETO e AUTOM√ÅTICO
  static Future<bool> sendSMS({
    required String phoneNumber,
    required String message,
  }) async {
    try {
      print('DEBUG: === INICIANDO ENVIO DE SMS ===');
      print('DEBUG: N√∫mero: $phoneNumber');
      print('DEBUG: Mensagem: $message');
      
      // Verifica permiss√µes primeiro
      print('DEBUG: Verificando permiss√µes...');
      if (!await hasPermissions()) {
        print('DEBUG: ‚ùå SEM PERMISS√ïES para enviar SMS');
        return false;
      }
      print('DEBUG: ‚úÖ PERMISS√ïES OK para enviar SMS');
      
      print('DEBUG: Preparando envio AUTOM√ÅTICO de SMS para: $phoneNumber');
      print('DEBUG: Mensagem: $message');
      
      // Para Android, vamos usar another_telephony para envio DIRETO
      if (Platform.isAndroid) {
        print('DEBUG: üü¢ Plataforma Android detectada');
        print('DEBUG: Usando another_telephony para envio DIRETO e AUTOM√ÅTICO');
        
        try {
          // Cria inst√¢ncia do telephony
          print('DEBUG: Criando inst√¢ncia do Telephony...');
          final telephony = Telephony.instance;
          print('DEBUG: ‚úÖ Inst√¢ncia do Telephony criada');
          
          // Verifica se tem permiss√µes de telephony
          print('DEBUG: Verificando capacidade de SMS do dispositivo...');
          final hasTelephonyPermission = await telephony.isSmsCapable ?? false;
          print('DEBUG: Capacidade de SMS: $hasTelephonyPermission');
          
          if (!hasTelephonyPermission) {
            print('DEBUG: ‚ùå Dispositivo n√£o tem capacidade de SMS');
            return false;
          }
          
          print('DEBUG: ‚úÖ Dispositivo tem capacidade de SMS - enviando...');
          
          // Envia SMS DIRETAMENTE usando another_telephony
          print('DEBUG: üöÄ Chamando telephony.sendSms...');
          await telephony.sendSms(
            to: phoneNumber,
            message: message,
          );
          
          print('DEBUG: ‚úÖ SMS enviado AUTOMATICAMENTE com sucesso!');
          
          return true;
          
        } catch (e) {
          print('DEBUG: ‚ùå Erro no envio direto via another_telephony: $e');
          print('DEBUG: Tipo do erro: ${e.runtimeType}');
          
          // Fallback: tenta envio via app padr√£o
          print('DEBUG: üîÑ Tentando fallback via app padr√£o...');
          
          try {
            print('DEBUG: Criando nova inst√¢ncia para fallback...');
            final telephonyFallback = Telephony.instance;
            print('DEBUG: üöÄ Chamando sendSmsByDefaultApp...');
            await telephonyFallback.sendSmsByDefaultApp(
              to: phoneNumber,
              message: message,
            );
            
            print('DEBUG: ‚úÖ SMS enviado via app padr√£o com sucesso!');
            return true;
            
          } catch (e2) {
            print('DEBUG: ‚ùå Erro no fallback: $e2');
            print('DEBUG: Tipo do erro fallback: ${e2.runtimeType}');
            return false;
          }
        }
      } else {
        print('DEBUG: ‚ùå Plataforma n√£o √© Android');
      }
      
      return false;
      
    } catch (e) {
      print('DEBUG: ‚ùå Erro geral ao enviar SMS automaticamente: $e');
      print('DEBUG: Tipo do erro geral: ${e.runtimeType}');
      return false;
    }
  }
  
  // Obt√©m informa√ß√µes b√°sicas do dispositivo
  static Future<Map<String, dynamic>> getDeviceInfo() async {
    try {
      final deviceInfo = <String, dynamic>{
        'platform': 'Android',
        'smsCapability': await hasPermissions() ? 'Dispon√≠vel' : 'N√£o dispon√≠vel',
      };
      
      return deviceInfo;
    } catch (e) {
      print('DEBUG: Erro ao obter informa√ß√µes do dispositivo: $e');
      return {};
    }
  }
}
